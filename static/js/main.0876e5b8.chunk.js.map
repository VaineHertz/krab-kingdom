{"version":3,"sources":["ART/crab.png","fonts/open-dyslexic/OpenDyslexic-Bold.otf","App.js","reportWebVitals.js","index.js"],"names":["module","exports","canvas","crabUnit","canvasCtx","App","canvasRef","useRef","useEffect","window","innerWidth","ctx","current","getContext","crabImage","Image","src","crab","x","y","canvasScale","onload","setInterval","width","height","fillStyle","fillRect","resetCanvas","drawImage","drawCrab","console","log","className","rel","type","href","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,4GCA3CD,EAAOC,QAAU,IAA0B,+C,wCCMvCC,EAAQC,EAAUC,E,+EAgGPC,MA7Cf,WACE,IAAMC,EAAYC,iBAAO,MAqBzB,OApBAC,qBAAU,WACKC,OAAOC,WAApB,IAGMC,GADNT,EAASI,EAAUM,SACAC,WAAW,MAC1BC,EAAY,IAAIC,MACpBD,EAAUE,IAAMC,IAChBd,EAhBK,CAACe,EAgBe,EAhBZC,EAgBe,EAhBZL,UAgBeA,GAC3BV,EAhCK,CAACO,IAgCiBA,EAhCZT,OAgCiBA,EAhCTkB,YAgCiB,GAEpCN,EAAUO,OAAS,WACjBC,aAAY,WACV,IAAIC,EAASd,OAAOC,WACpBN,EAAUgB,YAAcG,EAAM,KAlCtC,SAAqBnB,GACnBA,EAAUF,OAAOqB,MAAQ,KAAOnB,EAAUgB,YAC1ChB,EAAUF,OAAOsB,OAAS,IAAMpB,EAAUgB,YAC1ChB,EAAUO,IAAIc,UAAY,kBAC1BrB,EAAUO,IAAIe,SAAS,EAAG,EAAItB,EAAUF,OAAOqB,MAAQnB,EAAUF,OAAOsB,QA+BlEG,CAAYvB,GApBpB,SAAkBD,EAAUC,GAC1BA,EAAUO,IAAIiB,UAAUzB,EAASW,UAAUX,EAASe,EAAEf,EAASgB,EAAE,IAAKf,EAAUgB,YAAY,GAAIhB,EAAUgB,aAoBpGS,CAAS1B,EAAUC,KAClB,IAAK,OAET,IACH0B,QAAQC,IAAI,SAEV,yBAAKC,UAAU,OACb,0BAAMC,IAAI,aAAaC,KAAK,WAAWC,KAAK,cAC5C,+BAEA,8BACE,yBAAKH,UAAU,SAAf,gBAGA,4BAAQI,IAAK9B,IACb,4BAAQU,IAAI,qEACZ,4BAAQA,IAAI,aACZ,yBAAKgB,UAAU,UACb,yBAAKA,UAAU,iBACb,4BAAQA,UAAU,WAAlB,SACA,4BAAQA,UAAU,QAAlB,aClFGK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0876e5b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crab.09069f07.png\";","module.exports = __webpack_public_path__ + \"static/media/OpenDyslexic-Bold.98706a4b.otf\";","import React, { useRef, useEffect, useState } from 'react';\nimport './App.css';\nimport './style.css';\nimport './fonts/open-dyslexic/OpenDyslexic-Bold.otf';\nimport crab from './ART/crab.png';\n\nlet canvas, crabUnit, canvasCtx;\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\nconst _canvasCtx = function (context, cnvs, cnvsScale){\n  const ctx = context;\n  const canvas = cnvs;\n  const canvasScale = cnvsScale;\n  return {ctx, canvas, canvasScale};\n}\n\nfunction resetCanvas(canvasCtx){\n  canvasCtx.canvas.width = 1280 * canvasCtx.canvasScale;\n  canvasCtx.canvas.height = 720 * canvasCtx.canvasScale;\n  canvasCtx.ctx.fillStyle = 'rgb(15, 15, 15)';\n  canvasCtx.ctx.fillRect(0, 0,  canvasCtx.canvas.width,  canvasCtx.canvas.height);\n}\n\nconst _crabUnit = function(xi, yi, crabImagei){\n  let x = xi;\n  let y = yi;\n  const crabImage = crabImagei;\n  let isDraggable = false;\n  return {x, y, crabImage};\n}\n\nfunction drawCrab(crabUnit, canvasCtx){\n  canvasCtx.ctx.drawImage(crabUnit.crabImage,crabUnit.x,crabUnit.y,120* canvasCtx.canvasScale,78* canvasCtx.canvasScale);\n}\n\nfunction App() {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    let width  = window.innerWidth;\n    let canvasScale = width/1280;\n    canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    var crabImage = new Image();\n    crabImage.src = crab;\n    crabUnit = _crabUnit(0, 0, crabImage)\n    canvasCtx = _canvasCtx(ctx, canvas, 1)\n\n    crabImage.onload = function(){\n      setInterval(function(){\n        let width  = window.innerWidth;\n        canvasCtx.canvasScale = width/1280;\n        resetCanvas(canvasCtx);\n        drawCrab(crabUnit, canvasCtx);\n      }, 1000/30);\n    } \n  }, []);\n  console.log('hello');\n  return (\n    <div className=\"App\">\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n      <head>\n      </head>\n      <body> \n        <div className=\"title\">\n          Krab Kingdom\n        </div>\n        <canvas ref={canvasRef}/>\n        <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n        <script src=\"modal.js\"></script>\n        <div className='center'>\n          <div className=\"buttonsBorder\">\n            <button className=\"newGame\">Start</button>\n            <button className=\"info\">Info</button>\n          </div>\n        </div>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}